{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "Dataset Importing"
      ],
      "metadata": {
        "id": "FN6Nrg-e2Ao3"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "C5ZEoVkGxE8s",
        "outputId": "32c16dd6-ef5d-41cc-c708-979ac5e1161d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "dataset = pd.read_csv('/content/drive/MyDrive/spam.csv', encoding='latin-1')\n",
        "print(dataset.head())\n",
        "print(dataset.info())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bdV2vX69xM9a",
        "outputId": "3b4420e9-a9ae-4cf1-cb1c-e4b2635479eb"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "     v1                                                 v2 Unnamed: 2  \\\n",
            "0   ham  Go until jurong point, crazy.. Available only ...        NaN   \n",
            "1   ham                      Ok lar... Joking wif u oni...        NaN   \n",
            "2  spam  Free entry in 2 a wkly comp to win FA Cup fina...        NaN   \n",
            "3   ham  U dun say so early hor... U c already then say...        NaN   \n",
            "4   ham  Nah I don't think he goes to usf, he lives aro...        NaN   \n",
            "\n",
            "  Unnamed: 3 Unnamed: 4  \n",
            "0        NaN        NaN  \n",
            "1        NaN        NaN  \n",
            "2        NaN        NaN  \n",
            "3        NaN        NaN  \n",
            "4        NaN        NaN  \n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 5572 entries, 0 to 5571\n",
            "Data columns (total 5 columns):\n",
            " #   Column      Non-Null Count  Dtype \n",
            "---  ------      --------------  ----- \n",
            " 0   v1          5572 non-null   object\n",
            " 1   v2          5572 non-null   object\n",
            " 2   Unnamed: 2  50 non-null     object\n",
            " 3   Unnamed: 3  12 non-null     object\n",
            " 4   Unnamed: 4  6 non-null      object\n",
            "dtypes: object(5)\n",
            "memory usage: 217.8+ KB\n",
            "None\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "Vx9gOSZJ2LDm"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Importing libraries ,Reading dataset and doing pre-processing"
      ],
      "metadata": {
        "id": "orBHEkB-2Ssw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns"
      ],
      "metadata": {
        "id": "OM9xaLiDxyUX"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(data=dataset, x=dataset['v1'])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "nLsFeFOwx2_F",
        "outputId": "94c589e9-cdb6-443c-ac77-e28c4498fc4b"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fd465cbbe50>"
            ]
          },
          "metadata": {},
          "execution_count": 4
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "text = dataset.loc[:, 'v2']\n",
        "classification = dataset.loc[:, 'v1']\n",
        "print(text)\n",
        "print(classification)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7BBr99i7x4ON",
        "outputId": "a2448d6f-ed4b-4de9-a6fc-f635e8ba422d"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0       Go until jurong point, crazy.. Available only ...\n",
            "1                           Ok lar... Joking wif u oni...\n",
            "2       Free entry in 2 a wkly comp to win FA Cup fina...\n",
            "3       U dun say so early hor... U c already then say...\n",
            "4       Nah I don't think he goes to usf, he lives aro...\n",
            "                              ...                        \n",
            "5567    This is the 2nd time we have tried 2 contact u...\n",
            "5568                Will Ì_ b going to esplanade fr home?\n",
            "5569    Pity, * was in mood for that. So...any other s...\n",
            "5570    The guy did some bitching but I acted like i'd...\n",
            "5571                           Rofl. Its true to its name\n",
            "Name: v2, Length: 5572, dtype: object\n",
            "0        ham\n",
            "1        ham\n",
            "2       spam\n",
            "3        ham\n",
            "4        ham\n",
            "        ... \n",
            "5567    spam\n",
            "5568     ham\n",
            "5569     ham\n",
            "5570     ham\n",
            "5571     ham\n",
            "Name: v1, Length: 5572, dtype: object\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from nltk import word_tokenize\n",
        "from sklearn.model_selection import train_test_split\n",
        "import nltk\n",
        "nltk.download('punkt')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nsIN45Usx9bo",
        "outputId": "93a2fecf-dace-40ca-ff1f-a5964707e845"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
            "[nltk_data]   Unzipping tokenizers/punkt.zip.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_train, x_test, y_train, y_test = train_test_split(text, classification, test_size=0.2, random_state=42)"
      ],
      "metadata": {
        "id": "u4Wg4_KmyDYq"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "text_length = []\n",
        "for i in x_train :\n",
        "  text_length.append(len(word_tokenize(i)))"
      ],
      "metadata": {
        "id": "0fXLb52iyEan"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(max(text_length))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a6Hp6SLiyHs5",
        "outputId": "3476da61-3c55-4569-f650-1f736c2b5d9a"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "220\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from keras.preprocessing.text import Tokenizer\n"
      ],
      "metadata": {
        "id": "w43PINNMylli"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "max_sequence_length = 38\n",
        "\n",
        "tok = Tokenizer()\n",
        "tok.fit_on_texts(x_train.values)"
      ],
      "metadata": {
        "id": "UsB84_wvyu3X"
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "vocab_length = len(tok.word_index)"
      ],
      "metadata": {
        "id": "dSSZ1hYgywz3"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "vocab_length = len(tok.word_index)"
      ],
      "metadata": {
        "id": "KuBR5BKAy1v2"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_train_sequences = tok.texts_to_sequences(x_train.values)\n",
        "x_test_sequences = tok.texts_to_sequences(x_test.values)"
      ],
      "metadata": {
        "id": "eWFlz3qwy3YP"
      },
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.utils import pad_sequences\n"
      ],
      "metadata": {
        "id": "5Zxb5WjFy8EY"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_train = pad_sequences(x_train_sequences, maxlen=max_sequence_length)\n",
        "x_test = pad_sequences(x_test_sequences, maxlen=max_sequence_length)"
      ],
      "metadata": {
        "id": "FWZOKsdey-97"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_train[:2]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1v5wdMbXzCzZ",
        "outputId": "98bc89d5-833a-46c4-805a-a551f2d34943"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[   0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,\n",
              "           0,    0,    0,    0,    0,    0,    0,    0,   38,   30,    8,\n",
              "           5,  273, 1989,   81,  116,   26,   11, 1656,  322,   10,   53,\n",
              "          18,  299,   30,  349, 1990],\n",
              "       [   0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,\n",
              "           0,    0,    0,    0,  799,   15, 2555, 1442, 1127,  192, 2556,\n",
              "         171,   12,   98, 1991,   44,  195, 1657, 2557, 1992, 2558,   21,\n",
              "           9,    4,  203, 1025,  225]], dtype=int32)"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_train.values"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oDJh_fekzDYt",
        "outputId": "207fc2ca-a243-4b93-e653-a986d85fe430"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['ham', 'spam', 'ham', ..., 'ham', 'ham', 'ham'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import LabelEncoder\n"
      ],
      "metadata": {
        "id": "sJd1reTPzDf-"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "le = LabelEncoder()\n",
        "y_train = le.fit_transform(y_train)\n",
        "y_test = le.fit_transform(y_test)\n",
        "print(y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ph1Vckd2zDqb",
        "outputId": "603d8c4e-3ee8-46a7-a926-a6b22a491ea6"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0 1 0 ... 0 0 0]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from keras.models import Model, load_model\n",
        "from keras.layers import LSTM, Activation, Dense, Dropout, Input, Embedding\n",
        "from keras.optimizers import RMSprop"
      ],
      "metadata": {
        "id": "vwJIJgsUzYnL"
      },
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Creating models and Adding layers"
      ],
      "metadata": {
        "id": "rKYqkuIs2e0b"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def create_model(vocab_len, max_seq_len):\n",
        "    inputs = Input(name='inputs', shape=[max_seq_len])   #None, 150\n",
        "    layer = Embedding(vocab_length + 1, 50, input_length=max_seq_len)(inputs) #None, 150, 50\n",
        "    layer = LSTM(64)(layer)  #None, 64\n",
        "    layer = Dense(256,name='FC1')(layer) #None, 256\n",
        "    layer = Activation('relu')(layer) #None, 256\n",
        "    layer = Dropout(0.5)(layer) #None, 256\n",
        "    layer = Dense(1,name='out_layer')(layer) #None, 1\n",
        "    layer = Activation('sigmoid')(layer) #None, 1\n",
        "    model = Model(inputs=inputs,outputs=layer)\n",
        "    model.compile(loss='binary_crossentropy',optimizer=RMSprop(), metrics=['acc'])\n",
        "    return model\n",
        "\n",
        "model = create_model(vocab_length, max_sequence_length)\n",
        "model.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AmH4R-9ezYsu",
        "outputId": "3196995a-af8a-4004-95c0-19322f8cff03"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"model\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " inputs (InputLayer)         [(None, 38)]              0         \n",
            "                                                                 \n",
            " embedding (Embedding)       (None, 38, 50)            397750    \n",
            "                                                                 \n",
            " lstm (LSTM)                 (None, 64)                29440     \n",
            "                                                                 \n",
            " FC1 (Dense)                 (None, 256)               16640     \n",
            "                                                                 \n",
            " activation (Activation)     (None, 256)               0         \n",
            "                                                                 \n",
            " dropout (Dropout)           (None, 256)               0         \n",
            "                                                                 \n",
            " out_layer (Dense)           (None, 1)                 257       \n",
            "                                                                 \n",
            " activation_1 (Activation)   (None, 1)                 0         \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 444,087\n",
            "Trainable params: 444,087\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Compiling model"
      ],
      "metadata": {
        "id": "YjYw2Q3F2wda"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from keras.callbacks import EarlyStopping, ModelCheckpoint, TensorBoard"
      ],
      "metadata": {
        "id": "aRzZ6AnKzfXl"
      },
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "history = model.fit(x_train, y_train, batch_size=128, epochs=20, validation_split=0.2)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_qnSyCuYzrdx",
        "outputId": "66f4b8db-5ff3-443f-c6a4-1109affa5d97"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n",
            "28/28 [==============================] - 5s 98ms/step - loss: 0.2984 - acc: 0.8741 - val_loss: 0.1544 - val_acc: 0.9552\n",
            "Epoch 2/20\n",
            "28/28 [==============================] - 2s 74ms/step - loss: 0.0803 - acc: 0.9820 - val_loss: 0.0573 - val_acc: 0.9821\n",
            "Epoch 3/20\n",
            "28/28 [==============================] - 2s 75ms/step - loss: 0.0268 - acc: 0.9924 - val_loss: 0.0419 - val_acc: 0.9865\n",
            "Epoch 4/20\n",
            "28/28 [==============================] - 3s 98ms/step - loss: 0.0151 - acc: 0.9961 - val_loss: 0.0412 - val_acc: 0.9843\n",
            "Epoch 5/20\n",
            "28/28 [==============================] - 2s 75ms/step - loss: 0.0083 - acc: 0.9969 - val_loss: 0.0678 - val_acc: 0.9843\n",
            "Epoch 6/20\n",
            "28/28 [==============================] - 2s 74ms/step - loss: 0.0052 - acc: 0.9983 - val_loss: 0.0690 - val_acc: 0.9854\n",
            "Epoch 7/20\n",
            "28/28 [==============================] - 2s 75ms/step - loss: 4.3604e-04 - acc: 1.0000 - val_loss: 0.0707 - val_acc: 0.9865\n",
            "Epoch 8/20\n",
            "28/28 [==============================] - 2s 75ms/step - loss: 4.3695e-05 - acc: 1.0000 - val_loss: 0.0848 - val_acc: 0.9888\n",
            "Epoch 9/20\n",
            "28/28 [==============================] - 2s 74ms/step - loss: 0.0029 - acc: 0.9994 - val_loss: 0.0913 - val_acc: 0.9798\n",
            "Epoch 10/20\n",
            "28/28 [==============================] - 2s 74ms/step - loss: 2.9656e-04 - acc: 1.0000 - val_loss: 0.0992 - val_acc: 0.9832\n",
            "Epoch 11/20\n",
            "28/28 [==============================] - 2s 76ms/step - loss: 1.8744e-05 - acc: 1.0000 - val_loss: 0.1156 - val_acc: 0.9854\n",
            "Epoch 12/20\n",
            "28/28 [==============================] - 2s 76ms/step - loss: 2.5507e-06 - acc: 1.0000 - val_loss: 0.1101 - val_acc: 0.9888\n",
            "Epoch 13/20\n",
            "28/28 [==============================] - 2s 75ms/step - loss: 1.1500e-06 - acc: 1.0000 - val_loss: 0.1304 - val_acc: 0.9865\n",
            "Epoch 14/20\n",
            "28/28 [==============================] - 2s 75ms/step - loss: 3.2071e-07 - acc: 1.0000 - val_loss: 0.2487 - val_acc: 0.9821\n",
            "Epoch 15/20\n",
            "28/28 [==============================] - 2s 74ms/step - loss: 0.0046 - acc: 0.9994 - val_loss: 0.0985 - val_acc: 0.9832\n",
            "Epoch 16/20\n",
            "28/28 [==============================] - 2s 76ms/step - loss: 1.4251e-04 - acc: 1.0000 - val_loss: 0.1183 - val_acc: 0.9854\n",
            "Epoch 17/20\n",
            "28/28 [==============================] - 2s 75ms/step - loss: 8.2607e-06 - acc: 1.0000 - val_loss: 0.1241 - val_acc: 0.9854\n",
            "Epoch 18/20\n",
            "28/28 [==============================] - 2s 74ms/step - loss: 3.0136e-06 - acc: 1.0000 - val_loss: 0.1288 - val_acc: 0.9843\n",
            "Epoch 19/20\n",
            "28/28 [==============================] - 2s 75ms/step - loss: 1.9952e-06 - acc: 1.0000 - val_loss: 0.1374 - val_acc: 0.9843\n",
            "Epoch 20/20\n",
            "28/28 [==============================] - 2s 75ms/step - loss: 4.4795e-07 - acc: 1.0000 - val_loss: 0.1438 - val_acc: 0.9854\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Fitting and Saving the model"
      ],
      "metadata": {
        "id": "inuX6SVu22RM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "history_dict = history.history\n",
        "\n",
        "# list all data in history\n",
        "print(history_dict.keys())\n",
        "\n",
        "# summarize history for loss\n",
        "plt.plot(history_dict['loss'])\n",
        "plt.plot(history_dict['val_loss'])\n",
        "plt.title('Training and Validation Loss')\n",
        "plt.ylabel('loss')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'test'], loc='upper left')\n",
        "plt.show()\n",
        "\n",
        "# summarize history for accuracy\n",
        "plt.plot(history_dict['acc'])\n",
        "plt.plot(history_dict['val_acc'])\n",
        "plt.title('Training and Validation Accuracy')\n",
        "plt.ylabel('accuracy')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'test'], loc='upper left')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 590
        },
        "id": "mQWNKEdE0Gne",
        "outputId": "f549e9ff-5568-4eb3-c33f-92be2443efaa"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "dict_keys(['loss', 'acc', 'val_loss', 'val_acc'])\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.save('/content/drive/MyDrive/spam.h5')\n"
      ],
      "metadata": {
        "id": "oz-kGP9u0HN_"
      },
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Testing the model"
      ],
      "metadata": {
        "id": "DdZJUVY83Dx8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "loaded_model = load_model('/content/drive/MyDrive/spam.h5')\n",
        "test_loss, test_acc = accr = loaded_model.evaluate(x_test, y_test)\n",
        "print('Test set\\n  Loss: {:0.3f}\\n  Accuracy: {:0.3f}'.format(test_loss, test_acc))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "giqKxvSy0HUP",
        "outputId": "ef86c6f8-f5af-47ca-a3fa-2f29336b9e14"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "35/35 [==============================] - 1s 8ms/step - loss: 0.1899 - acc: 0.9848\n",
            "Test set\n",
            "  Loss: 0.190\n",
            "  Accuracy: 0.985\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np"
      ],
      "metadata": {
        "id": "mvhSz3tB1aqK"
      },
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred_prob = loaded_model.predict(x_test)\n",
        "\n",
        "print(np.round(y_pred_prob, 3))\n",
        "y_pred = y_pred_prob > 0.5\n",
        "y_pred"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5CXUWSaQ1cA1",
        "outputId": "72e26d54-7b26-49a2-ffb5-797e8d9880a0"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "35/35 [==============================] - 1s 9ms/step\n",
            "[[0.006]\n",
            " [0.   ]\n",
            " [1.   ]\n",
            " ...\n",
            " [0.   ]\n",
            " [0.   ]\n",
            " [1.   ]]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[False],\n",
              "       [False],\n",
              "       [ True],\n",
              "       ...,\n",
              "       [False],\n",
              "       [False],\n",
              "       [ True]])"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for i in range(5):\n",
        "    print('%s => %d (expected %d)' % (x_test[i].tolist(), y_pred[i], y_test[i]))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5Ps52F8X1e_z",
        "outputId": "b58c7534-4c46-4751-cae6-5c100fedb447"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1366, 1578, 1432, 19, 7893, 19, 19, 38, 118, 1650, 19, 738, 4, 449, 3023, 35, 1285] => 0 (expected 0)\n",
            "[1, 188, 11, 6440, 2, 7, 1, 135, 2, 28, 12, 4, 290, 7931, 1, 104, 33, 3, 22, 647, 15, 28, 4, 3607, 18, 374, 191, 224, 2137, 107, 433, 9, 74, 10, 5, 1097, 1806, 1171] => 0 (expected 0)\n",
            "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 54, 258, 144, 3, 54, 21, 3428, 3, 16, 2, 173, 53, 144, 761, 264, 7182, 208] => 1 (expected 1)\n",
            "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 33, 3, 1528, 13, 263, 53, 79, 228, 79, 3, 31, 7, 838, 69, 10, 8, 5, 168, 2, 205, 10, 54, 3, 499, 14, 8, 46] => 0 (expected 0)\n",
            "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 715, 29, 357, 532, 622, 15, 1107, 528, 706, 49, 435, 19, 98, 563, 496, 292, 71, 521, 2, 906, 1546, 138, 1200, 2216] => 1 (expected 1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import classification_report"
      ],
      "metadata": {
        "id": "h3E5TSen1kAG"
      },
      "execution_count": 38,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(classification_report(y_test, y_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2yWVk2gM1mn2",
        "outputId": "4f3af0dd-56ac-45bb-8040-68465e0e7328"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.98      1.00      0.99       965\n",
            "           1       1.00      0.89      0.94       150\n",
            "\n",
            "    accuracy                           0.98      1115\n",
            "   macro avg       0.99      0.94      0.97      1115\n",
            "weighted avg       0.99      0.98      0.98      1115\n",
            "\n"
          ]
        }
      ]
    }
  ]
}
